# В написании этого кода были использованы следующие принципы объектно-ориентированного программирования (ООП):

1.  Инкапсуляция: В классе Person данные скрыты от внешнего доступа и могут быть изменены только через публичный метод, такие как getName, addChild и setName. Также список детей инкапсулирован и доступен только через методы addChild и getChildren ##.

2. Наследование: В приведенном коде не использовалось прямое наследование, но возможно было бы расширить функциональность, создав подклассы от класса Person для представления различных типов людей с дополнительными атрибутами или методами.

3. Полиморфизм: Хотя в данном примере не использовался полиморфизм, но его можно было бы реализовать, создав различные методы для обработки объектов разных классов, связанных с генеалогическим деревом.

4. Абстракция: Классы Person и FamilyTree представляют абстракции реальных сущностей и операций, позволяя скрыть детали реализации и предоставить только необходимый интерфейс для работы с объектами.

5. Композиция: В классе Person используется композиция, так как список детей представляет собой коллекцию объектов типа Person. Также класс FamilyTree содержит объекты типа Person в качестве членов.




